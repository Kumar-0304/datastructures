#using adjacency matrix
def add_node(N):
    global node_count
    if N in nodes:
        print(N,"alreadsy present..")
    else:
        node_count=node_count+1
        nodes.append(N)
        for n in graph:
            n.append(0)
        temp=[]
        for i in range(node_count):
            temp.append(0)
        graph.append(temp)
def add_edge_undirected(v1,v2):
    if v1 not in nodes:
        print(v1,"not present ")
    elif v2 not in nodes:
        print(v2,"not present ")
    else:
        index1 = nodes.index(v1)
        index2 = nodes.index(v2)
        graph[index1][index2]=1
        graph[index2][index1]=1
def add_edge_directed(v1,v2):
    if v1 not in nodes:
        print(v1,"not present ")
    elif v2 not in nodes:
        print(v2,"not present")
    else:
        index1 = nodes.index(v1)
        index2 = nodes.index(v2)
        graph[index1][index2]=1
def add_edge_directed_weighted(v1,v2,cost):
    if v1 not in nodes:
        print(v1,"not present ")
    elif v2 not in nodes:
        print(v2,"not present")
    else:
        index1 = nodes.index(v1)
        index2 = nodes.index(v2)
        graph[index1][index2]=cost
def add_edge_undirected_weighted(v1,v2,cost):
    if v1 not in nodes:
        print(v1,"not present ")
    elif v2 not in nodes:
        print(v2,"not present ")
    else:
        index1 = nodes.index(v1)
        index2 = nodes.index(v2)
        graph[index1][index2]=cost
        graph[index2][index1]=cost
def delete_node(n):
    global node_count
    if n not in nodes:
        print(n,"not present..")
    else:
        node_count=node_count-1
        index1=nodes.index(n)
        nodes.pop(index1)
        graph.pop(index1)
        for i in graph:
            i.pop(index1)
def delete_edge(v1,v2):
    if v1 not in nodes:
        print(v1,"not present")
    elif v2 not in nodes:
        print(v2,"not present")
    else:
        index1=nodes.index(v1)
        index2= nodes.index(v2)
        graph[index1][index2]=0
        graph[index2][index1]=0
def delete_edge_directed(v1,v2):
    if v1 not in nodes:
        print(v1, "not present")
    elif v2 not in nodes:
        print(v2, "not present")
    else:
        index1 = nodes.index(v1)
        index2 = nodes.index(v2)
        graph[index1][index2] = 0





def print_graph():
    for i in range(node_count):
        for j in range(node_count):
            print(graph[i][j],end="  ")
        print()









nodes=[]
graph=[]

node_count=0
