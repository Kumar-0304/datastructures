class node:
    def __init__(self,data):
        self.data=data
        self.nref=None
        self.pref=None
class double_linkedlist:
    def __init__(self):
        self.head=None
    def forward_traversal(self):
        if self.head is None:
            print("linked list is empty..")
        else:
            n=self.head
            while n is not None:
                print(n.data)
                n=n.nref
    def reverse_traversal(self):
        if self.head is None:
            print("linked list is empty..")
        else:
            n=self.head
            while n.nref is not None:
                n=n.nref
            while n is not None:
                print(n.data)
                n=n.pref
    def insert_empty(self,data):
        if self.head is None:
            new_node=node(data)
            self.head=new_node
        else:
            print("linked list is not empty..")
    def insert_begin(self,data):
        new_node=node(data)
        if self.head is None:

            self.head=new_node
        else:
            new_node.nref=self.head
            self.head.pref=new_node
            self.head=new_node
    def insert_end(self,data):
        new_node=node(data)
        if self.head is None:

            self.head=new_node
        else:
            n=self.head
            while n.nref is not None:
                n=n.nref
            new_node.pref=n
            n.nref=new_node
    def add_after(self,data,x):
        if self.head is None:
            print("LL is empty!")
        else:
            n=self.head
            while n is not None:
                if n.data==x:
                    break
                n=n.nref
            if n is None:
                print("node not found..")
            else:
                new_node=node(data)
                new_node.nref=n.nref
                new_node.pref=n
                if n.nref is not None:
                    n.nref.pref=new_node
                n.nref=new_node
    def add_before(self,data,x):
        if self.head is None:
            print("LL is empty!")
        else:
            n=self.head
            while n is not None:
                if n.data==x:
                    break
                n=n.nref
            if n is None:
                print("node not found..")
            else:
                new_node=node(data)
                new_node.nref=n
                new_node.pref=n.pref
                if n.pref is not None:
                    n.pref.nref=new_node
                else:
                    self.head=new_node
                n.pref=new_node
    def delete_begin(self):
        if self.head is None:
            print("LL is empty!")
        else:
            if self.head.nref is None:
                print("only one  node present in LL")
                self.head=None
                print("now it was deleted")
            else:
                self.head=self.head.nref
                self.head.pref=None
    def delete_end(self):
        if self.head is None:
            print("LL is empty!")
        else:
            if self.head.nref is None:
                print("only one  node present in LL")
                self.head=None
                print("now it was deleted")
            else:
                n=self.head
                while n.nref is not None:
                    n=n.nref
                n.pref.nref=None
    def delete_by_value(self,x):
        if self.head is None:
            print("LL is empty!")
            return
        if self.head.nref is None:
            if x==self.head.data:
                self.head=None
            else:
                print("node not found")
            return
        if x==self.head.data:
            self.head=self.head.nref
            self.head.pref=None
            return
        n=self.head
        while n.nref is not None:
            if x==n.data:
                break
            n=n.nref
        if n.nref is None:
            if x==n.data:
                n.pref.nref=None
            else:
                print("node not found..")
            return
        if n.nref is not None:
            n.nref.pref=n.pref
            n.pref.nref=n.nref
        else:
            print("oops !!some thing wrong")

d=double_linkedlist()
while True:
    print("1.forwardtraversal 2.reversetraversal 3.insert_empty 4.insert_begin 5.insert_end 6.add_after 7.add_before 8.delete 10.exit")
    choice = input("entre your choice:")
    if choice == '1':
        d.forward_traversal()
    elif choice == '2':
        d.reverse_traversal()
    elif choice=='3':
        data=input("entre data:")
        d.insert_empty(data)
    elif choice=='4':
        data=input("entre data:")
        d.insert_begin(data)
    elif choice=='5':
        data=input("entre data:")
        d.insert_end(data)
    elif choice=='6':
        data = input("entre data:")
        x=input("entre positon u want to entre:")
        d.add_after(data,x)
    elif choice=='7':
        data= input("entre data:")
        x=input("entre positon u want to entre:")
        d.add_before(data,x)
    elif choice=='8':
        print("1.delete_begin 2.delete_end 3.delete_middle")
        choice=input("entre your choice:")
        if choice=='1':
            d.delete_begin()
        elif choice=='2':
            d.delete_end()
        elif choice=='3':
            x=input("entre position to delete:")
            d.delete_by_value(x)
        else:
            print("correct delete choice.")
    elif choice=='10':
        break
    else:
        print("entre correct choice...")


