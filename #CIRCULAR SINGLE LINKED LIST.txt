#CIRCULAR SINGLE LINKED LIST
class node:
    def __init__(self,data):
        self.data=data
        self.ref=None
class circular_sll:
    def __init__(self):
        self.head=None
    def insert_starting(self,data):
        if self.head is None:
            print("ll is empty.")
        else:
            new_node=node(data)
            new_node.ref=self.head
            n=self.head
            while n.ref is not self.head:
                if n.ref is self.head:
                    break
                n=n.ref
            if n.ref is self.head:
                n.ref=new_node
            else:
                print("it is not in circular linked list..")
            self.head=new_node
    def empty_list_insertion(self,data):
        if self.head is not None:
            print("linked list is not empty ..u can't consider as empty..")
        else:
            new_node=node(data)
            self.head=new_node
            self.head.ref=new_node
    def traversal(self):
        if self.head is None:
            print("ll is empty..")
        else:
            n=self.head
            while n.ref is not self.head:
                print(n.data)
                n=n.ref
            print(n.data)
    def insert_end(self,data):
        if self.head is None:
            print("linked list is empty..")
        else:
            new_node=node(data)
            n=self.head
            while n.ref is not self.head:
                n=n.ref
            if n.ref is self.head:
                n.ref=new_node
                new_node.ref=self.head
                return
    def delete_begining(self):
        if self.head is None:
            print("ll is empty.u cant perform delete operation..")
        else:
            n=self.head
            while n.ref is not self.head:
                n=n.ref
            n.ref=self.head.ref
            self.head=self.head.ref
    def delete_end(self):
        if self.head is None:
            print("ll is empty.u cant perform delete operation..")
        else:
            n=self.head
            while n.ref.ref is not self.head:
                n=n.ref
            n.ref=self.head
    def delete_by_value(self,x):
        if self.head is None:
            print("ll is empty.u cant perform delete operation..")
        else:
            n=self.head
            while n.ref.ref is not self.head:
                if n.ref.data==x:
                    break
                n=n.ref
            if n.ref.data==x:
                n.ref=n.ref.ref
            else:
                print("not found..")


c=circular_sll()
while True:
    print("1.insert_empty 2.insert_begin 3.traversal 4.insert_end 5.delete_starting 6.delete_end 7.delete_by_value 10.stop")
    choice=input("entre your choice:")
    if choice=='1':
        data=input("entre data u want to insert:->")
        c.empty_list_insertion(data)
    elif choice=='2':
        data = input("entre data u want to insert:->")
        c.insert_starting(data)
    elif choice=='3':
        c.traversal()
    elif choice=='4':
        data = input("entre data u want to insert:->")
        c.insert_end(data)
    elif choice=='5':
        c.delete_begining()
    elif choice=='6':
        c.delete_end()
    elif choice=='7':
        x=input("entre data u want to delete:")
        c.delete_by_value(x)
    elif choice=='10':
        break
    else:
        print("entre correct choice...")


