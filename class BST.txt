class BST:
    def __init__(self,key):
        self.key=key
        self.lchild=None
        self.rchild=None
    def insertion(self,data):
        if self.key is None:
            self.key=data
            return
        if self.key>data:
            if self.lchild:
                self.lchild.insertion(data)
            else:
                self.lchild=BST(data)
        else:
            if self.rchild:
                self.rchild.insertion(data)
            else:
                self.rchild=BST(data)

    def search(self,data):
        if self.key==data:
            print("Node found!...")
        else:
            if self.key>data:
                if self.lchild:
                    self.lchild.search(data)
                else:
                    print("node not found in treee...")
            else:
                if self.rchild:
                    self.rchild.search(data)

                else:
                    print("node not found in tree..")
    def pre_order(self):
        print(self.key)
        if self.lchild:
            self.lchild.pre_order()
        if self.rchild:
            self.rchild.pre_order()
    def in_order(self):
        if self.lchild:
            self.lchild.in_order()
        print(self.key)
        if self.rchild:
            self.rchild.in_order()
    def post_order(self):
        if self.lchild:
            self.lchild.post_order()
        if self.rchild:
            self.rchild.post_order()
        print(self.key)
    def delete_node(self,data):
        if self.key is None:
            print("tree is empty..")
            return
        if data<self.key:
            if self.lchild:
                self.lchild=self.lchild.delete_node(data)
            else:
                print("node not found..")
        elif data>self.key:
            if self.rchild:
                self.rchild=self.rchild.delete_node(data)
            else:
                print("node not found..")
        else:
            if self.lchild is None:
                temp=self.rchild
                self.key=None
                return temp
            if self.rchild is None:
                temp=self.lchild
                self.key=None
                return temp
            node=self.rchild
            while node.lchild:
                node=node.lchild
            self.key=node.key
            self.rchild=self.rchild.delete_node(node.key)
        return self
    def min_node(self):
        current=self
        while current.lchild:
            current=current.lchild
        print("minumum node in the tree is:",current.key)

    def max_node(self):
        current=self
        while current.rchild:
            current=current.rchild
        print("max node in tree is:",current.key)






root=BST(10)
l=[8,3,60,50,20,9]
for i in l:
    root.insertion(i)
root.min_node()
print('-----')
root.max_node()

